/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.psrestful);
  }
}(this, function(expect, psrestful) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InvoiceLineItem', function() {
      beforeEach(function() {
        instance = new psrestful.InvoiceLineItem();
      });

      it('should create an instance of InvoiceLineItem', function() {
        // TODO: update the code to test InvoiceLineItem
        expect(instance).to.be.a(psrestful.InvoiceLineItem);
      });

      it('should have the property invoiceLineItemNumber (base name: "invoiceLineItemNumber")', function() {
        // TODO: update the code to test the property invoiceLineItemNumber
        expect(instance).to.have.property('invoiceLineItemNumber');
        // expect(instance.invoiceLineItemNumber).to.be(expectedValueLiteral);
      });

      it('should have the property productId (base name: "productId")', function() {
        // TODO: update the code to test the property productId
        expect(instance).to.have.property('productId');
        // expect(instance.productId).to.be(expectedValueLiteral);
      });

      it('should have the property partId (base name: "partId")', function() {
        // TODO: update the code to test the property partId
        expect(instance).to.have.property('partId');
        // expect(instance.partId).to.be(expectedValueLiteral);
      });

      it('should have the property chargeId (base name: "chargeId")', function() {
        // TODO: update the code to test the property chargeId
        expect(instance).to.have.property('chargeId');
        // expect(instance.chargeId).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrderLineItemNumber (base name: "purchaseOrderLineItemNumber")', function() {
        // TODO: update the code to test the property purchaseOrderLineItemNumber
        expect(instance).to.have.property('purchaseOrderLineItemNumber');
        // expect(instance.purchaseOrderLineItemNumber).to.be(expectedValueLiteral);
      });

      it('should have the property orderedQuantity (base name: "orderedQuantity")', function() {
        // TODO: update the code to test the property orderedQuantity
        expect(instance).to.have.property('orderedQuantity');
        // expect(instance.orderedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceQuantity (base name: "invoiceQuantity")', function() {
        // TODO: update the code to test the property invoiceQuantity
        expect(instance).to.have.property('invoiceQuantity');
        // expect(instance.invoiceQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property backOrderedQuantity (base name: "backOrderedQuantity")', function() {
        // TODO: update the code to test the property backOrderedQuantity
        expect(instance).to.have.property('backOrderedQuantity');
        // expect(instance.backOrderedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property quantityUOM (base name: "quantityUOM")', function() {
        // TODO: update the code to test the property quantityUOM
        expect(instance).to.have.property('quantityUOM');
        // expect(instance.quantityUOM).to.be(expectedValueLiteral);
      });

      it('should have the property lineItemDescription (base name: "lineItemDescription")', function() {
        // TODO: update the code to test the property lineItemDescription
        expect(instance).to.have.property('lineItemDescription');
        // expect(instance.lineItemDescription).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice (base name: "unitPrice")', function() {
        // TODO: update the code to test the property unitPrice
        expect(instance).to.have.property('unitPrice');
        // expect(instance.unitPrice).to.be(expectedValueLiteral);
      });

      it('should have the property discountAmount (base name: "discountAmount")', function() {
        // TODO: update the code to test the property discountAmount
        expect(instance).to.have.property('discountAmount');
        // expect(instance.discountAmount).to.be(expectedValueLiteral);
      });

      it('should have the property extendedPrice (base name: "extendedPrice")', function() {
        // TODO: update the code to test the property extendedPrice
        expect(instance).to.have.property('extendedPrice');
        // expect(instance.extendedPrice).to.be(expectedValueLiteral);
      });

      it('should have the property distributorProductId (base name: "distributorProductId")', function() {
        // TODO: update the code to test the property distributorProductId
        expect(instance).to.have.property('distributorProductId');
        // expect(instance.distributorProductId).to.be(expectedValueLiteral);
      });

      it('should have the property distributorPartId (base name: "distributorPartId")', function() {
        // TODO: update the code to test the property distributorPartId
        expect(instance).to.have.property('distributorPartId');
        // expect(instance.distributorPartId).to.be(expectedValueLiteral);
      });

    });
  });

}));
