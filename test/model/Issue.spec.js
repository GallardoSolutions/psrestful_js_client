/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.psrestful);
  }
}(this, function(expect, psrestful) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Issue', function() {
      beforeEach(function() {
        instance = new psrestful.Issue();
      });

      it('should create an instance of Issue', function() {
        // TODO: update the code to test Issue
        expect(instance).to.be.a(psrestful.Issue);
      });

      it('should have the property issueId (base name: "issueId")', function() {
        // TODO: update the code to test the property issueId
        expect(instance).to.have.property('issueId');
        // expect(instance.issueId).to.be(expectedValueLiteral);
      });

      it('should have the property issueStatus (base name: "issueStatus")', function() {
        // TODO: update the code to test the property issueStatus
        expect(instance).to.have.property('issueStatus');
        // expect(instance.issueStatus).to.be(expectedValueLiteral);
      });

      it('should have the property issueCategory (base name: "issueCategory")', function() {
        // TODO: update the code to test the property issueCategory
        expect(instance).to.have.property('issueCategory');
        // expect(instance.issueCategory).to.be(expectedValueLiteral);
      });

      it('should have the property issueName (base name: "issueName")', function() {
        // TODO: update the code to test the property issueName
        expect(instance).to.have.property('issueName');
        // expect(instance.issueName).to.be(expectedValueLiteral);
      });

      it('should have the property urgentResponseRequired (base name: "urgentResponseRequired")', function() {
        // TODO: update the code to test the property urgentResponseRequired
        expect(instance).to.have.property('urgentResponseRequired');
        // expect(instance.urgentResponseRequired).to.be(expectedValueLiteral);
      });

      it('should have the property issueDescription (base name: "issueDescription")', function() {
        // TODO: update the code to test the property issueDescription
        expect(instance).to.have.property('issueDescription');
        // expect(instance.issueDescription).to.be(expectedValueLiteral);
      });

      it('should have the property responseRequiredBy (base name: "responseRequiredBy")', function() {
        // TODO: update the code to test the property responseRequiredBy
        expect(instance).to.have.property('responseRequiredBy');
        // expect(instance.responseRequiredBy).to.be(expectedValueLiteral);
      });

      it('should have the property issueResolutionURL (base name: "issueResolutionURL")', function() {
        // TODO: update the code to test the property issueResolutionURL
        expect(instance).to.have.property('issueResolutionURL');
        // expect(instance.issueResolutionURL).to.be(expectedValueLiteral);
      });

      it('should have the property issueBlockingStatus (base name: "issueBlockingStatus")', function() {
        // TODO: update the code to test the property issueBlockingStatus
        expect(instance).to.have.property('issueBlockingStatus');
        // expect(instance.issueBlockingStatus).to.be(expectedValueLiteral);
      });

      it('should have the property contactArray (base name: "ContactArray")', function() {
        // TODO: update the code to test the property contactArray
        expect(instance).to.have.property('contactArray');
        // expect(instance.contactArray).to.be(expectedValueLiteral);
      });

      it('should have the property productId (base name: "productId")', function() {
        // TODO: update the code to test the property productId
        expect(instance).to.have.property('productId');
        // expect(instance.productId).to.be(expectedValueLiteral);
      });

      it('should have the property resolutionArray (base name: "ResolutionArray")', function() {
        // TODO: update the code to test the property resolutionArray
        expect(instance).to.have.property('resolutionArray');
        // expect(instance.resolutionArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
