/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PsResTfulServiceApi);
  }
}(this, function(expect, PsResTfulServiceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PartInventory', function() {
      beforeEach(function() {
        instance = new PsResTfulServiceApi.PartInventory();
      });

      it('should create an instance of PartInventory', function() {
        // TODO: update the code to test PartInventory
        expect(instance).to.be.a(PsResTfulServiceApi.PartInventory);
      });

      it('should have the property partId (base name: "partId")', function() {
        // TODO: update the code to test the property partId
        expect(instance).to.have.property('partId');
        // expect(instance.partId).to.be(expectedValueLiteral);
      });

      it('should have the property mainPart (base name: "mainPart")', function() {
        // TODO: update the code to test the property mainPart
        expect(instance).to.have.property('mainPart');
        // expect(instance.mainPart).to.be(expectedValueLiteral);
      });

      it('should have the property partColor (base name: "partColor")', function() {
        // TODO: update the code to test the property partColor
        expect(instance).to.have.property('partColor');
        // expect(instance.partColor).to.be(expectedValueLiteral);
      });

      it('should have the property labelSize (base name: "labelSize")', function() {
        // TODO: update the code to test the property labelSize
        expect(instance).to.have.property('labelSize');
        // expect(instance.labelSize).to.be(expectedValueLiteral);
      });

      it('should have the property partDescription (base name: "partDescription")', function() {
        // TODO: update the code to test the property partDescription
        expect(instance).to.have.property('partDescription');
        // expect(instance.partDescription).to.be(expectedValueLiteral);
      });

      it('should have the property quantityAvailable (base name: "quantityAvailable")', function() {
        // TODO: update the code to test the property quantityAvailable
        expect(instance).to.have.property('quantityAvailable');
        // expect(instance.quantityAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property manufacturedItem (base name: "manufacturedItem")', function() {
        // TODO: update the code to test the property manufacturedItem
        expect(instance).to.have.property('manufacturedItem');
        // expect(instance.manufacturedItem).to.be(expectedValueLiteral);
      });

      it('should have the property buyToOrder (base name: "buyToOrder")', function() {
        // TODO: update the code to test the property buyToOrder
        expect(instance).to.have.property('buyToOrder');
        // expect(instance.buyToOrder).to.be(expectedValueLiteral);
      });

      it('should have the property replenishmentLeadTime (base name: "replenishmentLeadTime")', function() {
        // TODO: update the code to test the property replenishmentLeadTime
        expect(instance).to.have.property('replenishmentLeadTime');
        // expect(instance.replenishmentLeadTime).to.be(expectedValueLiteral);
      });

      it('should have the property attributeSelection (base name: "attributeSelection")', function() {
        // TODO: update the code to test the property attributeSelection
        expect(instance).to.have.property('attributeSelection');
        // expect(instance.attributeSelection).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property inventoryLocationArray (base name: "InventoryLocationArray")', function() {
        // TODO: update the code to test the property inventoryLocationArray
        expect(instance).to.have.property('inventoryLocationArray');
        // expect(instance.inventoryLocationArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
