/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PsResTfulServiceApi);
  }
}(this, function(expect, PsResTfulServiceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PsDomainModelPpcLocation', function() {
      beforeEach(function() {
        instance = new PsResTfulServiceApi.PsDomainModelPpcLocation();
      });

      it('should create an instance of PsDomainModelPpcLocation', function() {
        // TODO: update the code to test PsDomainModelPpcLocation
        expect(instance).to.be.a(PsResTfulServiceApi.PsDomainModelPpcLocation);
      });

      it('should have the property locationId (base name: "locationId")', function() {
        // TODO: update the code to test the property locationId
        expect(instance).to.have.property('locationId');
        // expect(instance.locationId).to.be(expectedValueLiteral);
      });

      it('should have the property locationName (base name: "locationName")', function() {
        // TODO: update the code to test the property locationName
        expect(instance).to.have.property('locationName');
        // expect(instance.locationName).to.be(expectedValueLiteral);
      });

      it('should have the property decorationArray (base name: "DecorationArray")', function() {
        // TODO: update the code to test the property decorationArray
        expect(instance).to.have.property('decorationArray');
        // expect(instance.decorationArray).to.be(expectedValueLiteral);
      });

      it('should have the property decorationsIncluded (base name: "decorationsIncluded")', function() {
        // TODO: update the code to test the property decorationsIncluded
        expect(instance).to.have.property('decorationsIncluded');
        // expect(instance.decorationsIncluded).to.be(expectedValueLiteral);
      });

      it('should have the property defaultLocation (base name: "defaultLocation")', function() {
        // TODO: update the code to test the property defaultLocation
        expect(instance).to.have.property('defaultLocation');
        // expect(instance.defaultLocation).to.be(expectedValueLiteral);
      });

      it('should have the property maxDecoration (base name: "maxDecoration")', function() {
        // TODO: update the code to test the property maxDecoration
        expect(instance).to.have.property('maxDecoration');
        // expect(instance.maxDecoration).to.be(expectedValueLiteral);
      });

      it('should have the property minDecoration (base name: "minDecoration")', function() {
        // TODO: update the code to test the property minDecoration
        expect(instance).to.have.property('minDecoration');
        // expect(instance.minDecoration).to.be(expectedValueLiteral);
      });

      it('should have the property locationRank (base name: "locationRank")', function() {
        // TODO: update the code to test the property locationRank
        expect(instance).to.have.property('locationRank');
        // expect(instance.locationRank).to.be(expectedValueLiteral);
      });

    });
  });

}));
