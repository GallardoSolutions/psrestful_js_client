/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.psrestful);
  }
}(this, function(expect, psrestful) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ProductV100', function() {
      beforeEach(function() {
        instance = new psrestful.ProductV100();
      });

      it('should create an instance of ProductV100', function() {
        // TODO: update the code to test ProductV100
        expect(instance).to.be.a(psrestful.ProductV100);
      });

      it('should have the property productId (base name: "productId")', function() {
        // TODO: update the code to test the property productId
        expect(instance).to.have.property('productId');
        // expect(instance.productId).to.be(expectedValueLiteral);
      });

      it('should have the property productName (base name: "productName")', function() {
        // TODO: update the code to test the property productName
        expect(instance).to.have.property('productName');
        // expect(instance.productName).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property priceExpiresDate (base name: "priceExpiresDate")', function() {
        // TODO: update the code to test the property priceExpiresDate
        expect(instance).to.have.property('priceExpiresDate');
        // expect(instance.priceExpiresDate).to.be(expectedValueLiteral);
      });

      it('should have the property productBrand (base name: "productBrand")', function() {
        // TODO: update the code to test the property productBrand
        expect(instance).to.have.property('productBrand');
        // expect(instance.productBrand).to.be(expectedValueLiteral);
      });

      it('should have the property _export (base name: "export")', function() {
        // TODO: update the code to test the property _export
        expect(instance).to.have.property('_export');
        // expect(instance._export).to.be(expectedValueLiteral);
      });

      it('should have the property lastChangeDate (base name: "lastChangeDate")', function() {
        // TODO: update the code to test the property lastChangeDate
        expect(instance).to.have.property('lastChangeDate');
        // expect(instance.lastChangeDate).to.be(expectedValueLiteral);
      });

      it('should have the property creationDate (base name: "creationDate")', function() {
        // TODO: update the code to test the property creationDate
        expect(instance).to.have.property('creationDate');
        // expect(instance.creationDate).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property effectiveDate (base name: "effectiveDate")', function() {
        // TODO: update the code to test the property effectiveDate
        expect(instance).to.have.property('effectiveDate');
        // expect(instance.effectiveDate).to.be(expectedValueLiteral);
      });

      it('should have the property isCaution (base name: "isCaution")', function() {
        // TODO: update the code to test the property isCaution
        expect(instance).to.have.property('isCaution');
        // expect(instance.isCaution).to.be(expectedValueLiteral);
      });

      it('should have the property cautionComment (base name: "cautionComment")', function() {
        // TODO: update the code to test the property cautionComment
        expect(instance).to.have.property('cautionComment');
        // expect(instance.cautionComment).to.be(expectedValueLiteral);
      });

      it('should have the property isCloseout (base name: "isCloseout")', function() {
        // TODO: update the code to test the property isCloseout
        expect(instance).to.have.property('isCloseout');
        // expect(instance.isCloseout).to.be(expectedValueLiteral);
      });

      it('should have the property lineName (base name: "lineName")', function() {
        // TODO: update the code to test the property lineName
        expect(instance).to.have.property('lineName');
        // expect(instance.lineName).to.be(expectedValueLiteral);
      });

      it('should have the property primaryImageURL (base name: "primaryImageURL")', function() {
        // TODO: update the code to test the property primaryImageURL
        expect(instance).to.have.property('primaryImageURL');
        // expect(instance.primaryImageURL).to.be(expectedValueLiteral);
      });

      it('should have the property complianceInfoAvailable (base name: "complianceInfoAvailable")', function() {
        // TODO: update the code to test the property complianceInfoAvailable
        expect(instance).to.have.property('complianceInfoAvailable');
        // expect(instance.complianceInfoAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property unspscCommodityCode (base name: "unspscCommodityCode")', function() {
        // TODO: update the code to test the property unspscCommodityCode
        expect(instance).to.have.property('unspscCommodityCode');
        // expect(instance.unspscCommodityCode).to.be(expectedValueLiteral);
      });

      it('should have the property imprintSize (base name: "imprintSize")', function() {
        // TODO: update the code to test the property imprintSize
        expect(instance).to.have.property('imprintSize');
        // expect(instance.imprintSize).to.be(expectedValueLiteral);
      });

      it('should have the property defaultSetUpCharge (base name: "defaultSetUpCharge")', function() {
        // TODO: update the code to test the property defaultSetUpCharge
        expect(instance).to.have.property('defaultSetUpCharge');
        // expect(instance.defaultSetUpCharge).to.be(expectedValueLiteral);
      });

      it('should have the property defaultRunCharge (base name: "defaultRunCharge")', function() {
        // TODO: update the code to test the property defaultRunCharge
        expect(instance).to.have.property('defaultRunCharge');
        // expect(instance.defaultRunCharge).to.be(expectedValueLiteral);
      });

      it('should have the property productCategoryArray (base name: "ProductCategoryArray")', function() {
        // TODO: update the code to test the property productCategoryArray
        expect(instance).to.have.property('productCategoryArray');
        // expect(instance.productCategoryArray).to.be(expectedValueLiteral);
      });

      it('should have the property relatedProductArray (base name: "RelatedProductArray")', function() {
        // TODO: update the code to test the property relatedProductArray
        expect(instance).to.have.property('relatedProductArray');
        // expect(instance.relatedProductArray).to.be(expectedValueLiteral);
      });

      it('should have the property productPartArray (base name: "ProductPartArray")', function() {
        // TODO: update the code to test the property productPartArray
        expect(instance).to.have.property('productPartArray');
        // expect(instance.productPartArray).to.be(expectedValueLiteral);
      });

      it('should have the property productKeywordArray (base name: "ProductKeywordArray")', function() {
        // TODO: update the code to test the property productKeywordArray
        expect(instance).to.have.property('productKeywordArray');
        // expect(instance.productKeywordArray).to.be(expectedValueLiteral);
      });

      it('should have the property locationDecorationArray (base name: "LocationDecorationArray")', function() {
        // TODO: update the code to test the property locationDecorationArray
        expect(instance).to.have.property('locationDecorationArray');
        // expect(instance.locationDecorationArray).to.be(expectedValueLiteral);
      });

      it('should have the property productPriceGroupArray (base name: "ProductPriceGroupArray")', function() {
        // TODO: update the code to test the property productPriceGroupArray
        expect(instance).to.have.property('productPriceGroupArray');
        // expect(instance.productPriceGroupArray).to.be(expectedValueLiteral);
      });

      it('should have the property fobPointArray (base name: "FobPointArray")', function() {
        // TODO: update the code to test the property fobPointArray
        expect(instance).to.have.property('fobPointArray');
        // expect(instance.fobPointArray).to.be(expectedValueLiteral);
      });

      it('should have the property productMarketingPointArray (base name: "ProductMarketingPointArray")', function() {
        // TODO: update the code to test the property productMarketingPointArray
        expect(instance).to.have.property('productMarketingPointArray');
        // expect(instance.productMarketingPointArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
