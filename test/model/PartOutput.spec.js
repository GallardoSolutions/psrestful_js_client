/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PsResTfulServiceApi);
  }
}(this, function(expect, PsResTfulServiceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PartOutput', function() {
      beforeEach(function() {
        instance = new PsResTfulServiceApi.PartOutput();
      });

      it('should create an instance of PartOutput', function() {
        // TODO: update the code to test PartOutput
        expect(instance).to.be.a(PsResTfulServiceApi.PartOutput);
      });

      it('should have the property partId (base name: "partId")', function() {
        // TODO: update the code to test the property partId
        expect(instance).to.have.property('partId');
        // expect(instance.partId).to.be(expectedValueLiteral);
      });

      it('should have the property partDescription (base name: "partDescription")', function() {
        // TODO: update the code to test the property partDescription
        expect(instance).to.have.property('partDescription');
        // expect(instance.partDescription).to.be(expectedValueLiteral);
      });

      it('should have the property partPriceArray (base name: "PartPriceArray")', function() {
        // TODO: update the code to test the property partPriceArray
        expect(instance).to.have.property('partPriceArray');
        // expect(instance.partPriceArray).to.be(expectedValueLiteral);
      });

      it('should have the property partGroup (base name: "partGroup")', function() {
        // TODO: update the code to test the property partGroup
        expect(instance).to.have.property('partGroup');
        // expect(instance.partGroup).to.be(expectedValueLiteral);
      });

      it('should have the property nextPartGroup (base name: "nextPartGroup")', function() {
        // TODO: update the code to test the property nextPartGroup
        expect(instance).to.have.property('nextPartGroup');
        // expect(instance.nextPartGroup).to.be(expectedValueLiteral);
      });

      it('should have the property partGroupRequired (base name: "partGroupRequired")', function() {
        // TODO: update the code to test the property partGroupRequired
        expect(instance).to.have.property('partGroupRequired');
        // expect(instance.partGroupRequired).to.be(expectedValueLiteral);
      });

      it('should have the property partGroupDescription (base name: "partGroupDescription")', function() {
        // TODO: update the code to test the property partGroupDescription
        expect(instance).to.have.property('partGroupDescription');
        // expect(instance.partGroupDescription).to.be(expectedValueLiteral);
      });

      it('should have the property ratio (base name: "ratio")', function() {
        // TODO: update the code to test the property ratio
        expect(instance).to.have.property('ratio');
        // expect(instance.ratio).to.be(expectedValueLiteral);
      });

      it('should have the property defaultPart (base name: "defaultPart")', function() {
        // TODO: update the code to test the property defaultPart
        expect(instance).to.have.property('defaultPart');
        // expect(instance.defaultPart).to.be(expectedValueLiteral);
      });

      it('should have the property locationIdArray (base name: "LocationIdArray")', function() {
        // TODO: update the code to test the property locationIdArray
        expect(instance).to.have.property('locationIdArray');
        // expect(instance.locationIdArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
