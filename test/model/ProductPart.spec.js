/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.psrestful);
  }
}(this, function(expect, psrestful) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ProductPart', function() {
      beforeEach(function() {
        instance = new psrestful.ProductPart();
      });

      it('should create an instance of ProductPart', function() {
        // TODO: update the code to test ProductPart
        expect(instance).to.be.a(psrestful.ProductPart);
      });

      it('should have the property partId (base name: "partId")', function() {
        // TODO: update the code to test the property partId
        expect(instance).to.have.property('partId');
        // expect(instance.partId).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property countryOfOrigin (base name: "countryOfOrigin")', function() {
        // TODO: update the code to test the property countryOfOrigin
        expect(instance).to.have.property('countryOfOrigin');
        // expect(instance.countryOfOrigin).to.be(expectedValueLiteral);
      });

      it('should have the property primaryMaterial (base name: "primaryMaterial")', function() {
        // TODO: update the code to test the property primaryMaterial
        expect(instance).to.have.property('primaryMaterial');
        // expect(instance.primaryMaterial).to.be(expectedValueLiteral);
      });

      it('should have the property shape (base name: "shape")', function() {
        // TODO: update the code to test the property shape
        expect(instance).to.have.property('shape');
        // expect(instance.shape).to.be(expectedValueLiteral);
      });

      it('should have the property apparelSize (base name: "ApparelSize")', function() {
        // TODO: update the code to test the property apparelSize
        expect(instance).to.have.property('apparelSize');
        // expect(instance.apparelSize).to.be(expectedValueLiteral);
      });

      it('should have the property dimension (base name: "Dimension")', function() {
        // TODO: update the code to test the property dimension
        expect(instance).to.have.property('dimension');
        // expect(instance.dimension).to.be(expectedValueLiteral);
      });

      it('should have the property leadTime (base name: "leadTime")', function() {
        // TODO: update the code to test the property leadTime
        expect(instance).to.have.property('leadTime');
        // expect(instance.leadTime).to.be(expectedValueLiteral);
      });

      it('should have the property unspsc (base name: "unspsc")', function() {
        // TODO: update the code to test the property unspsc
        expect(instance).to.have.property('unspsc');
        // expect(instance.unspsc).to.be(expectedValueLiteral);
      });

      it('should have the property gtin (base name: "gtin")', function() {
        // TODO: update the code to test the property gtin
        expect(instance).to.have.property('gtin');
        // expect(instance.gtin).to.be(expectedValueLiteral);
      });

      it('should have the property isRushService (base name: "isRushService")', function() {
        // TODO: update the code to test the property isRushService
        expect(instance).to.have.property('isRushService');
        // expect(instance.isRushService).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property effectiveDate (base name: "effectiveDate")', function() {
        // TODO: update the code to test the property effectiveDate
        expect(instance).to.have.property('effectiveDate');
        // expect(instance.effectiveDate).to.be(expectedValueLiteral);
      });

      it('should have the property isCloseout (base name: "isCloseout")', function() {
        // TODO: update the code to test the property isCloseout
        expect(instance).to.have.property('isCloseout');
        // expect(instance.isCloseout).to.be(expectedValueLiteral);
      });

      it('should have the property isCaution (base name: "isCaution")', function() {
        // TODO: update the code to test the property isCaution
        expect(instance).to.have.property('isCaution');
        // expect(instance.isCaution).to.be(expectedValueLiteral);
      });

      it('should have the property cautionComment (base name: "cautionComment")', function() {
        // TODO: update the code to test the property cautionComment
        expect(instance).to.have.property('cautionComment');
        // expect(instance.cautionComment).to.be(expectedValueLiteral);
      });

      it('should have the property nmfcCode (base name: "nmfcCode")', function() {
        // TODO: update the code to test the property nmfcCode
        expect(instance).to.have.property('nmfcCode');
        // expect(instance.nmfcCode).to.be(expectedValueLiteral);
      });

      it('should have the property nmfcDescription (base name: "nmfcDescription")', function() {
        // TODO: update the code to test the property nmfcDescription
        expect(instance).to.have.property('nmfcDescription');
        // expect(instance.nmfcDescription).to.be(expectedValueLiteral);
      });

      it('should have the property nmfcNumber (base name: "nmfcNumber")', function() {
        // TODO: update the code to test the property nmfcNumber
        expect(instance).to.have.property('nmfcNumber');
        // expect(instance.nmfcNumber).to.be(expectedValueLiteral);
      });

      it('should have the property isOnDemand (base name: "isOnDemand")', function() {
        // TODO: update the code to test the property isOnDemand
        expect(instance).to.have.property('isOnDemand');
        // expect(instance.isOnDemand).to.be(expectedValueLiteral);
      });

      it('should have the property isHazmat (base name: "isHazmat")', function() {
        // TODO: update the code to test the property isHazmat
        expect(instance).to.have.property('isHazmat');
        // expect(instance.isHazmat).to.be(expectedValueLiteral);
      });

      it('should have the property primaryColor (base name: "primaryColor")', function() {
        // TODO: update the code to test the property primaryColor
        expect(instance).to.have.property('primaryColor');
        // expect(instance.primaryColor).to.be(expectedValueLiteral);
      });

      it('should have the property colorArray (base name: "ColorArray")', function() {
        // TODO: update the code to test the property colorArray
        expect(instance).to.have.property('colorArray');
        // expect(instance.colorArray).to.be(expectedValueLiteral);
      });

      it('should have the property productPackagingArray (base name: "ProductPackagingArray")', function() {
        // TODO: update the code to test the property productPackagingArray
        expect(instance).to.have.property('productPackagingArray');
        // expect(instance.productPackagingArray).to.be(expectedValueLiteral);
      });

      it('should have the property shippingPackageArray (base name: "ShippingPackageArray")', function() {
        // TODO: update the code to test the property shippingPackageArray
        expect(instance).to.have.property('shippingPackageArray');
        // expect(instance.shippingPackageArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
