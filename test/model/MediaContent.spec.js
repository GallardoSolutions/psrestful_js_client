/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.psrestful);
  }
}(this, function(expect, psrestful) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MediaContent', function() {
      beforeEach(function() {
        instance = new psrestful.MediaContent();
      });

      it('should create an instance of MediaContent', function() {
        // TODO: update the code to test MediaContent
        expect(instance).to.be.a(psrestful.MediaContent);
      });

      it('should have the property productId (base name: "productId")', function() {
        // TODO: update the code to test the property productId
        expect(instance).to.have.property('productId');
        // expect(instance.productId).to.be(expectedValueLiteral);
      });

      it('should have the property partId (base name: "partId")', function() {
        // TODO: update the code to test the property partId
        expect(instance).to.have.property('partId');
        // expect(instance.partId).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property mediaType (base name: "mediaType")', function() {
        // TODO: update the code to test the property mediaType
        expect(instance).to.have.property('mediaType');
        // expect(instance.mediaType).to.be(expectedValueLiteral);
      });

      it('should have the property fileSize (base name: "fileSize")', function() {
        // TODO: update the code to test the property fileSize
        expect(instance).to.have.property('fileSize');
        // expect(instance.fileSize).to.be(expectedValueLiteral);
      });

      it('should have the property width (base name: "width")', function() {
        // TODO: update the code to test the property width
        expect(instance).to.have.property('width');
        // expect(instance.width).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property dpi (base name: "dpi")', function() {
        // TODO: update the code to test the property dpi
        expect(instance).to.have.property('dpi');
        // expect(instance.dpi).to.be(expectedValueLiteral);
      });

      it('should have the property color (base name: "color")', function() {
        // TODO: update the code to test the property color
        expect(instance).to.have.property('color');
        // expect(instance.color).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property singlePart (base name: "singlePart")', function() {
        // TODO: update the code to test the property singlePart
        expect(instance).to.have.property('singlePart');
        // expect(instance.singlePart).to.be(expectedValueLiteral);
      });

      it('should have the property changeTimeStamp (base name: "changeTimeStamp")', function() {
        // TODO: update the code to test the property changeTimeStamp
        expect(instance).to.have.property('changeTimeStamp');
        // expect(instance.changeTimeStamp).to.be(expectedValueLiteral);
      });

      it('should have the property classTypeArray (base name: "ClassTypeArray")', function() {
        // TODO: update the code to test the property classTypeArray
        expect(instance).to.have.property('classTypeArray');
        // expect(instance.classTypeArray).to.be(expectedValueLiteral);
      });

      it('should have the property decorationArray (base name: "DecorationArray")', function() {
        // TODO: update the code to test the property decorationArray
        expect(instance).to.have.property('decorationArray');
        // expect(instance.decorationArray).to.be(expectedValueLiteral);
      });

      it('should have the property locationArray (base name: "LocationArray")', function() {
        // TODO: update the code to test the property locationArray
        expect(instance).to.have.property('locationArray');
        // expect(instance.locationArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
