/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.psrestful);
  }
}(this, function(expect, psrestful) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Invoice', function() {
      beforeEach(function() {
        instance = new psrestful.Invoice();
      });

      it('should create an instance of Invoice', function() {
        // TODO: update the code to test Invoice
        expect(instance).to.be.a(psrestful.Invoice);
      });

      it('should have the property invoiceNumber (base name: "invoiceNumber")', function() {
        // TODO: update the code to test the property invoiceNumber
        expect(instance).to.have.property('invoiceNumber');
        // expect(instance.invoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceType (base name: "invoiceType")', function() {
        // TODO: update the code to test the property invoiceType
        expect(instance).to.have.property('invoiceType');
        // expect(instance.invoiceType).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDate (base name: "invoiceDate")', function() {
        // TODO: update the code to test the property invoiceDate
        expect(instance).to.have.property('invoiceDate');
        // expect(instance.invoiceDate).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrderNumber (base name: "purchaseOrderNumber")', function() {
        // TODO: update the code to test the property purchaseOrderNumber
        expect(instance).to.have.property('purchaseOrderNumber');
        // expect(instance.purchaseOrderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseOrderVersion (base name: "purchaseOrderVersion")', function() {
        // TODO: update the code to test the property purchaseOrderVersion
        expect(instance).to.have.property('purchaseOrderVersion');
        // expect(instance.purchaseOrderVersion).to.be(expectedValueLiteral);
      });

      it('should have the property billTo (base name: "BillTo")', function() {
        // TODO: update the code to test the property billTo
        expect(instance).to.have.property('billTo');
        // expect(instance.billTo).to.be(expectedValueLiteral);
      });

      it('should have the property soldTo (base name: "SoldTo")', function() {
        // TODO: update the code to test the property soldTo
        expect(instance).to.have.property('soldTo');
        // expect(instance.soldTo).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceComments (base name: "invoiceComments")', function() {
        // TODO: update the code to test the property invoiceComments
        expect(instance).to.have.property('invoiceComments');
        // expect(instance.invoiceComments).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTerms (base name: "paymentTerms")', function() {
        // TODO: update the code to test the property paymentTerms
        expect(instance).to.have.property('paymentTerms');
        // expect(instance.paymentTerms).to.be(expectedValueLiteral);
      });

      it('should have the property paymentDueDate (base name: "paymentDueDate")', function() {
        // TODO: update the code to test the property paymentDueDate
        expect(instance).to.have.property('paymentDueDate');
        // expect(instance.paymentDueDate).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property fobId (base name: "fobId")', function() {
        // TODO: update the code to test the property fobId
        expect(instance).to.have.property('fobId');
        // expect(instance.fobId).to.be(expectedValueLiteral);
      });

      it('should have the property salesAmount (base name: "salesAmount")', function() {
        // TODO: update the code to test the property salesAmount
        expect(instance).to.have.property('salesAmount');
        // expect(instance.salesAmount).to.be(expectedValueLiteral);
      });

      it('should have the property shippingAmount (base name: "shippingAmount")', function() {
        // TODO: update the code to test the property shippingAmount
        expect(instance).to.have.property('shippingAmount');
        // expect(instance.shippingAmount).to.be(expectedValueLiteral);
      });

      it('should have the property handlingAmount (base name: "handlingAmount")', function() {
        // TODO: update the code to test the property handlingAmount
        expect(instance).to.have.property('handlingAmount');
        // expect(instance.handlingAmount).to.be(expectedValueLiteral);
      });

      it('should have the property taxAmount (base name: "taxAmount")', function() {
        // TODO: update the code to test the property taxAmount
        expect(instance).to.have.property('taxAmount');
        // expect(instance.taxAmount).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceAmount (base name: "invoiceAmount")', function() {
        // TODO: update the code to test the property invoiceAmount
        expect(instance).to.have.property('invoiceAmount');
        // expect(instance.invoiceAmount).to.be(expectedValueLiteral);
      });

      it('should have the property advancePaymentAmount (base name: "advancePaymentAmount")', function() {
        // TODO: update the code to test the property advancePaymentAmount
        expect(instance).to.have.property('advancePaymentAmount');
        // expect(instance.advancePaymentAmount).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceAmountDue (base name: "invoiceAmountDue")', function() {
        // TODO: update the code to test the property invoiceAmountDue
        expect(instance).to.have.property('invoiceAmountDue');
        // expect(instance.invoiceAmountDue).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDocumentUrl (base name: "invoiceDocumentUrl")', function() {
        // TODO: update the code to test the property invoiceDocumentUrl
        expect(instance).to.have.property('invoiceDocumentUrl');
        // expect(instance.invoiceDocumentUrl).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceLineItemsArray (base name: "InvoiceLineItemsArray")', function() {
        // TODO: update the code to test the property invoiceLineItemsArray
        expect(instance).to.have.property('invoiceLineItemsArray');
        // expect(instance.invoiceLineItemsArray).to.be(expectedValueLiteral);
      });

      it('should have the property salesOrderNumbersArray (base name: "SalesOrderNumbersArray")', function() {
        // TODO: update the code to test the property salesOrderNumbersArray
        expect(instance).to.have.property('salesOrderNumbersArray');
        // expect(instance.salesOrderNumbersArray).to.be(expectedValueLiteral);
      });

      it('should have the property taxArray (base name: "TaxArray")', function() {
        // TODO: update the code to test the property taxArray
        expect(instance).to.have.property('taxArray');
        // expect(instance.taxArray).to.be(expectedValueLiteral);
      });

      it('should have the property invoicePaymentUrl (base name: "invoicePaymentUrl")', function() {
        // TODO: update the code to test the property invoicePaymentUrl
        expect(instance).to.have.property('invoicePaymentUrl');
        // expect(instance.invoicePaymentUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
