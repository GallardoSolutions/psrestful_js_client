/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PsResTfulServiceApi);
  }
}(this, function(expect, PsResTfulServiceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PO', function() {
      beforeEach(function() {
        instance = new PsResTfulServiceApi.PO();
      });

      it('should create an instance of PO', function() {
        // TODO: update the code to test PO
        expect(instance).to.be.a(PsResTfulServiceApi.PO);
      });

      it('should have the property environment (base name: "environment")', function() {
        // TODO: update the code to test the property environment
        expect(instance).to.have.property('environment');
        // expect(instance.environment).to.be(expectedValueLiteral);
      });

      it('should have the property orderType (base name: "orderType")', function() {
        // TODO: update the code to test the property orderType
        expect(instance).to.have.property('orderType');
        // expect(instance.orderType).to.be(expectedValueLiteral);
      });

      it('should have the property orderNumber (base name: "orderNumber")', function() {
        // TODO: update the code to test the property orderNumber
        expect(instance).to.have.property('orderNumber');
        // expect(instance.orderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property orderDate (base name: "orderDate")', function() {
        // TODO: update the code to test the property orderDate
        expect(instance).to.have.property('orderDate');
        // expect(instance.orderDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "totalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTerms (base name: "paymentTerms")', function() {
        // TODO: update the code to test the property paymentTerms
        expect(instance).to.have.property('paymentTerms');
        // expect(instance.paymentTerms).to.be(expectedValueLiteral);
      });

      it('should have the property rush (base name: "rush")', function() {
        // TODO: update the code to test the property rush
        expect(instance).to.have.property('rush');
        // expect(instance.rush).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property digitalProof (base name: "DigitalProof")', function() {
        // TODO: update the code to test the property digitalProof
        expect(instance).to.have.property('digitalProof');
        // expect(instance.digitalProof).to.be(expectedValueLiteral);
      });

      it('should have the property orderContactArray (base name: "OrderContactArray")', function() {
        // TODO: update the code to test the property orderContactArray
        expect(instance).to.have.property('orderContactArray');
        // expect(instance.orderContactArray).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentArray (base name: "ShipmentArray")', function() {
        // TODO: update the code to test the property shipmentArray
        expect(instance).to.have.property('shipmentArray');
        // expect(instance.shipmentArray).to.be(expectedValueLiteral);
      });

      it('should have the property lineItemArray (base name: "LineItemArray")', function() {
        // TODO: update the code to test the property lineItemArray
        expect(instance).to.have.property('lineItemArray');
        // expect(instance.lineItemArray).to.be(expectedValueLiteral);
      });

      it('should have the property termsAndConditions (base name: "termsAndConditions")', function() {
        // TODO: update the code to test the property termsAndConditions
        expect(instance).to.have.property('termsAndConditions');
        // expect(instance.termsAndConditions).to.be(expectedValueLiteral);
      });

      it('should have the property salesChannel (base name: "salesChannel")', function() {
        // TODO: update the code to test the property salesChannel
        expect(instance).to.have.property('salesChannel');
        // expect(instance.salesChannel).to.be(expectedValueLiteral);
      });

      it('should have the property promoCode (base name: "promoCode")', function() {
        // TODO: update the code to test the property promoCode
        expect(instance).to.have.property('promoCode');
        // expect(instance.promoCode).to.be(expectedValueLiteral);
      });

      it('should have the property taxInformationArray (base name: "TaxInformationArray")', function() {
        // TODO: update the code to test the property taxInformationArray
        expect(instance).to.have.property('taxInformationArray');
        // expect(instance.taxInformationArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
