/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PsResTfulServiceApi);
  }
}(this, function(expect, PsResTfulServiceApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelPackage', function() {
      beforeEach(function() {
        instance = new PsResTfulServiceApi.ModelPackage();
      });

      it('should create an instance of ModelPackage', function() {
        // TODO: update the code to test ModelPackage
        expect(instance).to.be.a(PsResTfulServiceApi.ModelPackage);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property trackingNumber (base name: "trackingNumber")', function() {
        // TODO: update the code to test the property trackingNumber
        expect(instance).to.have.property('trackingNumber');
        // expect(instance.trackingNumber).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentDate (base name: "shipmentDate")', function() {
        // TODO: update the code to test the property shipmentDate
        expect(instance).to.have.property('shipmentDate');
        // expect(instance.shipmentDate).to.be(expectedValueLiteral);
      });

      it('should have the property dimUOM (base name: "dimUOM")', function() {
        // TODO: update the code to test the property dimUOM
        expect(instance).to.have.property('dimUOM');
        // expect(instance.dimUOM).to.be(expectedValueLiteral);
      });

      it('should have the property length (base name: "length")', function() {
        // TODO: update the code to test the property length
        expect(instance).to.have.property('length');
        // expect(instance.length).to.be(expectedValueLiteral);
      });

      it('should have the property width (base name: "width")', function() {
        // TODO: update the code to test the property width
        expect(instance).to.have.property('width');
        // expect(instance.width).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property weightUOM (base name: "weightUOM")', function() {
        // TODO: update the code to test the property weightUOM
        expect(instance).to.have.property('weightUOM');
        // expect(instance.weightUOM).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property carrier (base name: "carrier")', function() {
        // TODO: update the code to test the property carrier
        expect(instance).to.have.property('carrier');
        // expect(instance.carrier).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentMethod (base name: "shipmentMethod")', function() {
        // TODO: update the code to test the property shipmentMethod
        expect(instance).to.have.property('shipmentMethod');
        // expect(instance.shipmentMethod).to.be(expectedValueLiteral);
      });

      it('should have the property shippingAccount (base name: "shippingAccount")', function() {
        // TODO: update the code to test the property shippingAccount
        expect(instance).to.have.property('shippingAccount');
        // expect(instance.shippingAccount).to.be(expectedValueLiteral);
      });

      it('should have the property shipmentTerms (base name: "shipmentTerms")', function() {
        // TODO: update the code to test the property shipmentTerms
        expect(instance).to.have.property('shipmentTerms');
        // expect(instance.shipmentTerms).to.be(expectedValueLiteral);
      });

      it('should have the property itemArray (base name: "ItemArray")', function() {
        // TODO: update the code to test the property itemArray
        expect(instance).to.have.property('itemArray');
        // expect(instance.itemArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
