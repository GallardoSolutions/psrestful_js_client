/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import GetIssueResponseV200 from '../model/GetIssueResponseV200';
import GetOrderStatusResponseV200 from '../model/GetOrderStatusResponseV200';
import GetServiceMethodsResponseV200 from '../model/GetServiceMethodsResponseV200';
import HTTPValidationError from '../model/HTTPValidationError';
import OrderStatusDetailsResponse from '../model/OrderStatusDetailsResponse';
import OrderStatusTypesResponse from '../model/OrderStatusTypesResponse';
import PsDomainModelOrderStatusV100QueryType from '../model/PsDomainModelOrderStatusV100QueryType';

/**
* OrderStatus service.
* @module api/OrderStatusApi
* @version 0.0.1
*/
export default class OrderStatusApi {

    /**
    * Constructs a new OrderStatusApi. 
    * @alias module:api/OrderStatusApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getIssueV200 operation.
     * @callback moduleapi/OrderStatusApi~getIssueV200Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIssueResponseV200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Issue
     * @param {Object} supplierCode 
     * @param {Object} issueId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/OrderStatusApi~getIssueV200Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getIssueV200(supplierCode, issueId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getIssueV200");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling getIssueV200");
      }

      let pathParams = {
        'supplier_code': supplierCode,'issue_id': issueId
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetIssueResponseV200;

      return this.apiClient.callApi(
        '/v2.0.0/suppliers/{supplier_code}/issues/{issue_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrderStatusDetailsV100 operation.
     * @callback moduleapi/OrderStatusApi~getOrderStatusDetailsV100Callback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatusDetailsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order Status Details
     * @param {Object} supplierCode 
     * @param {module:model/PsDomainModelOrderStatusV100QueryType} queryType 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.referenceNumber 
     * @param {Object} opts.statusTimestamp 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/OrderStatusApi~getOrderStatusDetailsV100Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrderStatusDetailsV100(supplierCode, queryType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getOrderStatusDetailsV100");
      }
      // verify the required parameter 'queryType' is set
      if (queryType === undefined || queryType === null) {
        throw new Error("Missing the required parameter 'queryType' when calling getOrderStatusDetailsV100");
      }

      let pathParams = {
        'supplier_code': supplierCode
      };
      let queryParams = {
        'query_type': queryType,'reference_number': opts['referenceNumber'],'status_timestamp': opts['statusTimestamp'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderStatusDetailsResponse;

      return this.apiClient.callApi(
        '/v1.0.0/suppliers/{supplier_code}/order-status-details/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrderStatusTypesV100 operation.
     * @callback moduleapi/OrderStatusApi~getOrderStatusTypesV100Callback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatusTypesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order Status Types
     * @param {Object} supplierCode 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/OrderStatusApi~getOrderStatusTypesV100Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrderStatusTypesV100(supplierCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getOrderStatusTypesV100");
      }

      let pathParams = {
        'supplier_code': supplierCode
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderStatusTypesResponse;

      return this.apiClient.callApi(
        '/v1.0.0/suppliers/{supplier_code}/order-status-types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrderStatusV200 operation.
     * @callback moduleapi/OrderStatusApi~getOrderStatusV200Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrderStatusResponseV200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Order Status
     * @param {Object} supplierCode 
     * @param {module:model/PsDomainModelOrderStatusV100QueryType} queryType 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.referenceNumber 
     * @param {Object} opts.statusTimestamp 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/OrderStatusApi~getOrderStatusV200Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrderStatusV200(supplierCode, queryType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getOrderStatusV200");
      }
      // verify the required parameter 'queryType' is set
      if (queryType === undefined || queryType === null) {
        throw new Error("Missing the required parameter 'queryType' when calling getOrderStatusV200");
      }

      let pathParams = {
        'supplier_code': supplierCode
      };
      let queryParams = {
        'query_type': queryType,'reference_number': opts['referenceNumber'],'status_timestamp': opts['statusTimestamp'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOrderStatusResponseV200;

      return this.apiClient.callApi(
        '/v2.0.0/suppliers/{supplier_code}/order-status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getServiceMethodsV200 operation.
     * @callback moduleapi/OrderStatusApi~getServiceMethodsV200Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceMethodsResponseV200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Service Methods
     * @param {Object} supplierCode 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/OrderStatusApi~getServiceMethodsV200Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getServiceMethodsV200(supplierCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getServiceMethodsV200");
      }

      let pathParams = {
        'supplier_code': supplierCode
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetServiceMethodsResponseV200;

      return this.apiClient.callApi(
        '/v2.0.0/suppliers/{supplier_code}/service-methods/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}