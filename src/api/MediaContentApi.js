/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import GetMediaDateModifiedResponse from '../model/GetMediaDateModifiedResponse';
import HTTPValidationError from '../model/HTTPValidationError';
import MediaContentDetailsResponse from '../model/MediaContentDetailsResponse';

/**
* MediaContent service.
* @module api/MediaContentApi
* @version 0.0.1
*/
export default class MediaContentApi {

    /**
    * Constructs a new MediaContentApi. 
    * @alias module:api/MediaContentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getMediaContent operation.
     * @callback moduleapi/MediaContentApi~getMediaContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaContentDetailsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Media Content
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.cultureName The language culture name.  This tailors the response to a specific culture. i.e. language, units of measure, etc. Null assumes en-US. Valid values follows &#x60;ISO 639x&#x60;, ex: en-US, en-GB, fr-FR, etc.
     * @param {Object} opts.mediaType  (default to <.>)
     * @param {Object} opts.partId 
     * @param {Object} opts.classType 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/MediaContentApi~getMediaContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMediaContent(supplierCode, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getMediaContent");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getMediaContent");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'culture_name': opts['cultureName'],'media_type': opts['mediaType'],'part_id': opts['partId'],'class_type': opts['classType'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MediaContentDetailsResponse;

      return this.apiClient.callApi(
        '/v1.1.0/suppliers/{supplier_code}/medias/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMediaDateModified operation.
     * @callback moduleapi/MediaContentApi~getMediaDateModifiedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMediaDateModifiedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Media Date Modified
     * @param {Object} supplierCode 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.cultureName The language culture name. (default to <.>)
     * @param {Object} opts.since 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/MediaContentApi~getMediaDateModifiedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMediaDateModified(supplierCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getMediaDateModified");
      }

      let pathParams = {
        'supplier_code': supplierCode
      };
      let queryParams = {
        'culture_name': opts['cultureName'],'since': opts['since'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetMediaDateModifiedResponse;

      return this.apiClient.callApi(
        '/v1.1.0/suppliers/{supplier_code}/media-modified-since/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}