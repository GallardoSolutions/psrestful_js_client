/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import FilterValuesResponseV200 from '../model/FilterValuesResponseV200';
import HTTPValidationError from '../model/HTTPValidationError';
import InventoryLevelsResponseV121 from '../model/InventoryLevelsResponseV121';
import InventoryLevelsResponseV200 from '../model/InventoryLevelsResponseV200';

/**
* Inventory service.
* @module api/InventoryApi
* @version 0.0.1
*/
export default class InventoryApi {

    /**
    * Constructs a new InventoryApi. 
    * @alias module:api/InventoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getFilterValues operation.
     * @callback moduleapi/InventoryApi~getFilterValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilterValuesResponseV200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Filter Values
     * @param {Object} supplierCode 
     * @param {Object} apiVersion 
     * @param {Object} productId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.productIdType 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/InventoryApi~getFilterValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFilterValues(supplierCode, apiVersion, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getFilterValues");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getFilterValues");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getFilterValues");
      }

      let pathParams = {
        'supplier_code': supplierCode,'api_version': apiVersion,'product_id': productId
      };
      let queryParams = {
        'product_id_type': opts['productIdType'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FilterValuesResponseV200;

      return this.apiClient.callApi(
        '/v{api_version}/suppliers/{supplier_code}/inventory/filter-values/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInventoryByProductV121 operation.
     * @callback moduleapi/InventoryApi~getInventoryByProductV121Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryLevelsResponseV121{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Inventory By Product V121
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/InventoryApi~getInventoryByProductV121Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInventoryByProductV121(supplierCode, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getInventoryByProductV121");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getInventoryByProductV121");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryLevelsResponseV121;

      return this.apiClient.callApi(
        '/v1.2.1/suppliers/{supplier_code}/inventory/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInventoryByProductV200 operation.
     * @callback moduleapi/InventoryApi~getInventoryByProductV200Callback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryLevelsResponseV200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Inventory By Product V200
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/InventoryApi~getInventoryByProductV200Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInventoryByProductV200(supplierCode, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getInventoryByProductV200");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getInventoryByProductV200");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InventoryLevelsResponseV200;

      return this.apiClient.callApi(
        '/v2.0.0/suppliers/{supplier_code}/inventory/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}