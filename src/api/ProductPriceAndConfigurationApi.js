/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AvailableChargesResponse from '../model/AvailableChargesResponse';
import AvailableLocationsResponse from '../model/AvailableLocationsResponse';
import ConfigurationAndPricingResponse from '../model/ConfigurationAndPricingResponse';
import DecorationColorResponse from '../model/DecorationColorResponse';
import FobPointsResponse from '../model/FobPointsResponse';
import HTTPValidationError from '../model/HTTPValidationError';
import PriceType from '../model/PriceType';

/**
* ProductPriceAndConfiguration service.
* @module api/ProductPriceAndConfigurationApi
* @version 0.0.1
*/
export default class ProductPriceAndConfigurationApi {

    /**
    * Constructs a new ProductPriceAndConfigurationApi. 
    * @alias module:api/ProductPriceAndConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getAvailableCharges operation.
     * @callback moduleapi/ProductPriceAndConfigurationApi~getAvailableChargesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableChargesResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Charges
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.localizationCountry  (default to <.>)
     * @param {Object} opts.localizationLanguage  (default to <.>)
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/ProductPriceAndConfigurationApi~getAvailableChargesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAvailableCharges(supplierCode, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getAvailableCharges");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getAvailableCharges");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'localization_country': opts['localizationCountry'],'localization_language': opts['localizationLanguage'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AvailableChargesResponse;

      return this.apiClient.callApi(
        '/v1.0.0/suppliers/{supplier_code}/available-charges/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAvailableLocations operation.
     * @callback moduleapi/ProductPriceAndConfigurationApi~getAvailableLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableLocationsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Locations
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.localizationCountry  (default to <.>)
     * @param {Object} opts.localizationLanguage  (default to <.>)
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/ProductPriceAndConfigurationApi~getAvailableLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAvailableLocations(supplierCode, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getAvailableLocations");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getAvailableLocations");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'localization_country': opts['localizationCountry'],'localization_language': opts['localizationLanguage'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AvailableLocationsResponse;

      return this.apiClient.callApi(
        '/v1.0.0/suppliers/{supplier_code}/available-locations/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getConfigurationAndPricing operation.
     * @callback moduleapi/ProductPriceAndConfigurationApi~getConfigurationAndPricingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationAndPricingResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Configuration And Pricing
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} currency 
     * @param {Object} fobId 
     * @param {module:model/PriceType} priceType 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.configurationType  (default to <.>)
     * @param {Object} opts.partId 
     * @param {Object} opts.localizationCountry  (default to <.>)
     * @param {Object} opts.localizationLanguage  (default to <.>)
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/ProductPriceAndConfigurationApi~getConfigurationAndPricingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getConfigurationAndPricing(supplierCode, productId, currency, fobId, priceType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getConfigurationAndPricing");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getConfigurationAndPricing");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getConfigurationAndPricing");
      }
      // verify the required parameter 'fobId' is set
      if (fobId === undefined || fobId === null) {
        throw new Error("Missing the required parameter 'fobId' when calling getConfigurationAndPricing");
      }
      // verify the required parameter 'priceType' is set
      if (priceType === undefined || priceType === null) {
        throw new Error("Missing the required parameter 'priceType' when calling getConfigurationAndPricing");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'currency': currency,'fob_id': fobId,'price_type': priceType,'configuration_type': opts['configurationType'],'part_id': opts['partId'],'localization_country': opts['localizationCountry'],'localization_language': opts['localizationLanguage'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigurationAndPricingResponse;

      return this.apiClient.callApi(
        '/v1.0.0/suppliers/{supplier_code}/pricing-and-configuration/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDecorationColors operation.
     * @callback moduleapi/ProductPriceAndConfigurationApi~getDecorationColorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecorationColorResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Decoration Colors
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} locationId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.decorationId 
     * @param {Object} opts.localizationCountry  (default to <.>)
     * @param {Object} opts.localizationLanguage  (default to <.>)
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/ProductPriceAndConfigurationApi~getDecorationColorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDecorationColors(supplierCode, productId, locationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getDecorationColors");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getDecorationColors");
      }
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling getDecorationColors");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'location_id': locationId,'decoration_id': opts['decorationId'],'localization_country': opts['localizationCountry'],'localization_language': opts['localizationLanguage'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DecorationColorResponse;

      return this.apiClient.callApi(
        '/v1.0.0/suppliers/{supplier_code}/decoration-colors/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFobPoints operation.
     * @callback moduleapi/ProductPriceAndConfigurationApi~getFobPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FobPointsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Fob Points
     * @param {Object} supplierCode 
     * @param {Object} productId 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {Object} opts.localizationCountry  (default to <.>)
     * @param {Object} opts.localizationLanguage  (default to <.>)
     * @param {Object} opts.environment  (default to <.>)
     * @param {Object} opts.xForwardedFor 
     * @param {Object} opts.xAccountId 
     * @param {module:api/ProductPriceAndConfigurationApi~getFobPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getFobPoints(supplierCode, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'supplierCode' is set
      if (supplierCode === undefined || supplierCode === null) {
        throw new Error("Missing the required parameter 'supplierCode' when calling getFobPoints");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getFobPoints");
      }

      let pathParams = {
        'supplier_code': supplierCode,'product_id': productId
      };
      let queryParams = {
        'localization_country': opts['localizationCountry'],'localization_language': opts['localizationLanguage'],'environment': opts['environment']
      };
      let headerParams = {
        'X-Forwarded-For': opts['xForwardedFor'],'x-account-id': opts['xAccountId']
      };
      let formParams = {
        
      };

      let authNames = ['APIKeyHeader', 'HTTPBasic', 'OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FobPointsResponse;

      return this.apiClient.callApi(
        '/v1.0.0/suppliers/{supplier_code}/fob-points/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}