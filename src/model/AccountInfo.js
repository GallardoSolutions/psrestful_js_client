/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The AccountInfo model module.
 * @module model/AccountInfo
 * @version 0.0.1
 */
export default class AccountInfo {
  /**
   * Constructs a new <code>AccountInfo</code>.
   * accountName The name of the account that will be invoiced for the purchase order. This also represents the companyName field from the PO.   64 STRING       FALSE  # noqa accountNumber       The account number invoiced.    64 STRING       FALSE attentionTo Attention To (first and last name of contact)   64 STRING       FALSE address1    Address line 1  35 STRING       FALSE address2    Address line 2  35 STRING       FALSE address3    Address line 3  35 STRING       FALSE city        The city        30 STRING       FALSE region      The 2 character US state abbreviation or 2-3 character non-US region.   3 STRING        FALSE postalCode  The postal code 10 STRING       FALSE country     The country in ISO 3166-2 format        2 STRING        FALSE email       The email       128 STRING      FALSE phone       The phone number        32 STRING       FALSE
   * @alias module:model/AccountInfo
   * @class
   * @param accountName {Object} 
   * @param accountNumber {Object} 
   * @param attentionTo {Object} 
   * @param address1 {Object} 
   * @param address2 {Object} 
   * @param address3 {Object} 
   * @param city {Object} 
   * @param region {Object} 
   * @param postalCode {Object} 
   * @param country {Object} 
   * @param email {Object} 
   * @param phone {Object} 
   */
  constructor(accountName, accountNumber, attentionTo, address1, address2, address3, city, region, postalCode, country, email, phone) {
    this.accountName = accountName;
    this.accountNumber = accountNumber;
    this.attentionTo = attentionTo;
    this.address1 = address1;
    this.address2 = address2;
    this.address3 = address3;
    this.city = city;
    this.region = region;
    this.postalCode = postalCode;
    this.country = country;
    this.email = email;
    this.phone = phone;
  }

  /**
   * Constructs a <code>AccountInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountInfo} obj Optional instance to populate.
   * @return {module:model/AccountInfo} The populated <code>AccountInfo</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AccountInfo();
      if (data.hasOwnProperty('accountName'))
        obj.accountName = ApiClient.convertToType(data['accountName'], Object);
      if (data.hasOwnProperty('accountNumber'))
        obj.accountNumber = ApiClient.convertToType(data['accountNumber'], Object);
      if (data.hasOwnProperty('attentionTo'))
        obj.attentionTo = ApiClient.convertToType(data['attentionTo'], Object);
      if (data.hasOwnProperty('address1'))
        obj.address1 = ApiClient.convertToType(data['address1'], Object);
      if (data.hasOwnProperty('address2'))
        obj.address2 = ApiClient.convertToType(data['address2'], Object);
      if (data.hasOwnProperty('address3'))
        obj.address3 = ApiClient.convertToType(data['address3'], Object);
      if (data.hasOwnProperty('city'))
        obj.city = ApiClient.convertToType(data['city'], Object);
      if (data.hasOwnProperty('region'))
        obj.region = ApiClient.convertToType(data['region'], Object);
      if (data.hasOwnProperty('postalCode'))
        obj.postalCode = ApiClient.convertToType(data['postalCode'], Object);
      if (data.hasOwnProperty('country'))
        obj.country = ApiClient.convertToType(data['country'], Object);
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], Object);
      if (data.hasOwnProperty('phone'))
        obj.phone = ApiClient.convertToType(data['phone'], Object);
    }
    return obj;
  }
}

/**
 * @member {Object} accountName
 */
AccountInfo.prototype.accountName = undefined;

/**
 * @member {Object} accountNumber
 */
AccountInfo.prototype.accountNumber = undefined;

/**
 * @member {Object} attentionTo
 */
AccountInfo.prototype.attentionTo = undefined;

/**
 * @member {Object} address1
 */
AccountInfo.prototype.address1 = undefined;

/**
 * @member {Object} address2
 */
AccountInfo.prototype.address2 = undefined;

/**
 * @member {Object} address3
 */
AccountInfo.prototype.address3 = undefined;

/**
 * @member {Object} city
 */
AccountInfo.prototype.city = undefined;

/**
 * @member {Object} region
 */
AccountInfo.prototype.region = undefined;

/**
 * @member {Object} postalCode
 */
AccountInfo.prototype.postalCode = undefined;

/**
 * @member {Object} country
 */
AccountInfo.prototype.country = undefined;

/**
 * @member {Object} email
 */
AccountInfo.prototype.email = undefined;

/**
 * @member {Object} phone
 */
AccountInfo.prototype.phone = undefined;

