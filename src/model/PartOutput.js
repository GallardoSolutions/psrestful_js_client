/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The PartOutput model module.
 * @module model/PartOutput
 * @version 0.0.1
 */
export default class PartOutput {
  /**
   * Constructs a new <code>PartOutput</code>.
   * @alias module:model/PartOutput
   * @class
   * @param partId {Object} 
   * @param partDescription {Object} 
   * @param partPriceArray {Object} 
   * @param partGroup {Object} A numeric identifier grouping mutually exclusive parts together. When configuring data, always start with part group “1”
   * @param partGroupRequired {Object} A boolean value specifying if this partGroup is required for the product configuration. If set to TRUE, a selection in the partGroup is required for ordering
   * @param partGroupDescription {Object} A description of the partGroup: Optional Lid`, `Straw
   * @param ratio {Object} Describes how the amount of partIds that need to be added to the order based on the number of products ordered
   * @param defaultPart {Object} This part is included in the “Basic Pricing Configuration” service price. This field is optional, but highly encouraged
   * @param locationIdArray {Object} 
   */
  constructor(partId, partDescription, partPriceArray, partGroup, partGroupRequired, partGroupDescription, ratio, defaultPart, locationIdArray) {
    this.partId = partId;
    this.partDescription = partDescription;
    this.partPriceArray = partPriceArray;
    this.partGroup = partGroup;
    this.partGroupRequired = partGroupRequired;
    this.partGroupDescription = partGroupDescription;
    this.ratio = ratio;
    this.defaultPart = defaultPart;
    this.locationIdArray = locationIdArray;
  }

  /**
   * Constructs a <code>PartOutput</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PartOutput} obj Optional instance to populate.
   * @return {module:model/PartOutput} The populated <code>PartOutput</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PartOutput();
      if (data.hasOwnProperty('partId'))
        obj.partId = ApiClient.convertToType(data['partId'], Object);
      if (data.hasOwnProperty('partDescription'))
        obj.partDescription = ApiClient.convertToType(data['partDescription'], Object);
      if (data.hasOwnProperty('PartPriceArray'))
        obj.partPriceArray = ApiClient.convertToType(data['PartPriceArray'], Object);
      if (data.hasOwnProperty('partGroup'))
        obj.partGroup = ApiClient.convertToType(data['partGroup'], Object);
      if (data.hasOwnProperty('nextPartGroup'))
        obj.nextPartGroup = ApiClient.convertToType(data['nextPartGroup'], Object);
      if (data.hasOwnProperty('partGroupRequired'))
        obj.partGroupRequired = ApiClient.convertToType(data['partGroupRequired'], Object);
      if (data.hasOwnProperty('partGroupDescription'))
        obj.partGroupDescription = ApiClient.convertToType(data['partGroupDescription'], Object);
      if (data.hasOwnProperty('ratio'))
        obj.ratio = ApiClient.convertToType(data['ratio'], Object);
      if (data.hasOwnProperty('defaultPart'))
        obj.defaultPart = ApiClient.convertToType(data['defaultPart'], Object);
      if (data.hasOwnProperty('LocationIdArray'))
        obj.locationIdArray = ApiClient.convertToType(data['LocationIdArray'], Object);
    }
    return obj;
  }
}

/**
 * @member {Object} partId
 */
PartOutput.prototype.partId = undefined;

/**
 * @member {Object} partDescription
 */
PartOutput.prototype.partDescription = undefined;

/**
 * @member {Object} partPriceArray
 */
PartOutput.prototype.partPriceArray = undefined;

/**
 * A numeric identifier grouping mutually exclusive parts together. When configuring data, always start with part group “1”
 * @member {Object} partGroup
 */
PartOutput.prototype.partGroup = undefined;

/**
 * The next mutually exclusive partGroup to complete configuration ofthe product
 * @member {Object} nextPartGroup
 */
PartOutput.prototype.nextPartGroup = undefined;

/**
 * A boolean value specifying if this partGroup is required for the product configuration. If set to TRUE, a selection in the partGroup is required for ordering
 * @member {Object} partGroupRequired
 */
PartOutput.prototype.partGroupRequired = undefined;

/**
 * A description of the partGroup: Optional Lid`, `Straw
 * @member {Object} partGroupDescription
 */
PartOutput.prototype.partGroupDescription = undefined;

/**
 * Describes how the amount of partIds that need to be added to the order based on the number of products ordered
 * @member {Object} ratio
 */
PartOutput.prototype.ratio = undefined;

/**
 * This part is included in the “Basic Pricing Configuration” service price. This field is optional, but highly encouraged
 * @member {Object} defaultPart
 */
PartOutput.prototype.defaultPart = undefined;

/**
 * @member {Object} locationIdArray
 */
PartOutput.prototype.locationIdArray = undefined;

