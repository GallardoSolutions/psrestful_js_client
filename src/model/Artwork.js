/*
 * PS RESTful Service API
 * A proxy service for PromoStandards SOAP to a REST API
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The Artwork model module.
 * @module model/Artwork
 * @version 0.0.1
 */
export default class Artwork {
  /**
   * Constructs a new <code>Artwork</code>.
   * @alias module:model/Artwork
   * @class
   * @param refArtworkId {Object} A pre-shared artwork Id that can be used by the supplier to find and reference the artwork
   * @param description {Object} A textual description of the artwork being provided
   * @param dimensions {Object} 
   * @param artworkFileArray {Object} 
   * @param instructions {Object} Any instructions regarding the processing or modification of artwork. `Adding instructions will cause delays in processing`
   * @param layers {Object} 
   * @param typesetArray {Object} 
   * @param totalStitchCount {Object} The total stitch count for the specified embroidery art
   */
  constructor(refArtworkId, description, dimensions, artworkFileArray, instructions, layers, typesetArray, totalStitchCount) {
    this.refArtworkId = refArtworkId;
    this.description = description;
    this.dimensions = dimensions;
    this.artworkFileArray = artworkFileArray;
    this.instructions = instructions;
    this.layers = layers;
    this.typesetArray = typesetArray;
    this.totalStitchCount = totalStitchCount;
  }

  /**
   * Constructs a <code>Artwork</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Artwork} obj Optional instance to populate.
   * @return {module:model/Artwork} The populated <code>Artwork</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Artwork();
      if (data.hasOwnProperty('refArtworkId'))
        obj.refArtworkId = ApiClient.convertToType(data['refArtworkId'], Object);
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], Object);
      if (data.hasOwnProperty('Dimensions'))
        obj.dimensions = ApiClient.convertToType(data['Dimensions'], Object);
      if (data.hasOwnProperty('ArtworkFileArray'))
        obj.artworkFileArray = ApiClient.convertToType(data['ArtworkFileArray'], Object);
      if (data.hasOwnProperty('instructions'))
        obj.instructions = ApiClient.convertToType(data['instructions'], Object);
      if (data.hasOwnProperty('Layers'))
        obj.layers = ApiClient.convertToType(data['Layers'], Object);
      if (data.hasOwnProperty('TypesetArray'))
        obj.typesetArray = ApiClient.convertToType(data['TypesetArray'], Object);
      if (data.hasOwnProperty('totalStitchCount'))
        obj.totalStitchCount = ApiClient.convertToType(data['totalStitchCount'], Object);
    }
    return obj;
  }
}

/**
 * A pre-shared artwork Id that can be used by the supplier to find and reference the artwork
 * @member {Object} refArtworkId
 */
Artwork.prototype.refArtworkId = undefined;

/**
 * A textual description of the artwork being provided
 * @member {Object} description
 */
Artwork.prototype.description = undefined;

/**
 * @member {Object} dimensions
 */
Artwork.prototype.dimensions = undefined;

/**
 * @member {Object} artworkFileArray
 */
Artwork.prototype.artworkFileArray = undefined;

/**
 * Any instructions regarding the processing or modification of artwork. `Adding instructions will cause delays in processing`
 * @member {Object} instructions
 */
Artwork.prototype.instructions = undefined;

/**
 * @member {Object} layers
 */
Artwork.prototype.layers = undefined;

/**
 * @member {Object} typesetArray
 */
Artwork.prototype.typesetArray = undefined;

/**
 * The total stitch count for the specified embroidery art
 * @member {Object} totalStitchCount
 */
Artwork.prototype.totalStitchCount = undefined;

